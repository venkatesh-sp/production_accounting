// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package accounting

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  first_name,
  last_name,
  email,
  phone,
  dob,
  username,
  password,
  profile_image,
  address,
  is_active,
  meta,
  company_id,
  created_by,
  created_at,
  modified_by,
  modified_at

) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
)
RETURNING id, first_name, last_name, email, phone, dob, username, password, profile_image, address, is_active, company_id, meta, created_by, created_at, modified_by, modified_at
`

type CreateUserParams struct {
	FirstName    sql.NullString
	LastName     sql.NullString
	Email        sql.NullString
	Phone        sql.NullString
	Dob          sql.NullTime
	Username     sql.NullString
	Password     sql.NullString
	ProfileImage sql.NullString
	Address      sql.NullString
	IsActive     sql.NullBool
	Meta         pqtype.NullRawMessage
	CompanyID    sql.NullInt32
	CreatedBy    sql.NullInt32
	CreatedAt    sql.NullTime
	ModifiedBy   sql.NullInt32
	ModifiedAt   sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Dob,
		arg.Username,
		arg.Password,
		arg.ProfileImage,
		arg.Address,
		arg.IsActive,
		arg.Meta,
		arg.CompanyID,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.ModifiedBy,
		arg.ModifiedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Dob,
		&i.Username,
		&i.Password,
		&i.ProfileImage,
		&i.Address,
		&i.IsActive,
		&i.CompanyID,
		&i.Meta,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ModifiedBy,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, email, phone, dob, username, password, profile_image, address, is_active, company_id, meta, created_by, created_at, modified_by, modified_at FROM "user"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Dob,
		&i.Username,
		&i.Password,
		&i.ProfileImage,
		&i.Address,
		&i.IsActive,
		&i.CompanyID,
		&i.Meta,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ModifiedBy,
		&i.ModifiedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, email, phone, dob, username, password, profile_image, address, is_active, company_id, meta, created_by, created_at, modified_by, modified_at FROM "user"
ORDER BY email
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.Dob,
			&i.Username,
			&i.Password,
			&i.ProfileImage,
			&i.Address,
			&i.IsActive,
			&i.CompanyID,
			&i.Meta,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ModifiedBy,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET
  first_name = $2,
  last_name = $3,
  email = $4,
  phone = $5,
  dob = $6,
  username = $7,
  password = $8,
  profile_image = $9,
  address = $10,
  is_active = $11,
  meta = $12,
  company_id = $13,
  created_by = $14,
  created_at = $15,
  modified_by = $16,
  modified_at= $17
WHERE id = $1
`

type UpdateUserParams struct {
	ID           int32
	FirstName    sql.NullString
	LastName     sql.NullString
	Email        sql.NullString
	Phone        sql.NullString
	Dob          sql.NullTime
	Username     sql.NullString
	Password     sql.NullString
	ProfileImage sql.NullString
	Address      sql.NullString
	IsActive     sql.NullBool
	Meta         pqtype.NullRawMessage
	CompanyID    sql.NullInt32
	CreatedBy    sql.NullInt32
	CreatedAt    sql.NullTime
	ModifiedBy   sql.NullInt32
	ModifiedAt   sql.NullTime
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Dob,
		arg.Username,
		arg.Password,
		arg.ProfileImage,
		arg.Address,
		arg.IsActive,
		arg.Meta,
		arg.CompanyID,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.ModifiedBy,
		arg.ModifiedAt,
	)
	return err
}
