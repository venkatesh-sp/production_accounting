// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: vendor.sql

package accounting

import (
	"context"
	"database/sql"
)

const createVendor = `-- name: CreateVendor :one
INSERT INTO "vendor" (
  name,
  is_active,
  meta,
  created_by,
  created_at,
  modified_by,
  modified_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, is_active, meta, created_by, created_at, modified_by, modified_at
`

type CreateVendorParams struct {
	Name       sql.NullString
	IsActive   sql.NullBool
	Meta       sql.NullString
	CreatedBy  sql.NullInt32
	CreatedAt  sql.NullTime
	ModifiedBy sql.NullInt32
	ModifiedAt sql.NullTime
}

func (q *Queries) CreateVendor(ctx context.Context, arg CreateVendorParams) (Vendor, error) {
	row := q.db.QueryRowContext(ctx, createVendor,
		arg.Name,
		arg.IsActive,
		arg.Meta,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.ModifiedBy,
		arg.ModifiedAt,
	)
	var i Vendor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.Meta,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ModifiedBy,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteVendor = `-- name: DeleteVendor :exec
DELETE FROM "vendor"
WHERE id = $1
`

func (q *Queries) DeleteVendor(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteVendor, id)
	return err
}

const getVendorByID = `-- name: GetVendorByID :one
SELECT id, name, is_active, meta, created_by, created_at, modified_by, modified_at FROM "vendor"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVendorByID(ctx context.Context, id int32) (Vendor, error) {
	row := q.db.QueryRowContext(ctx, getVendorByID, id)
	var i Vendor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IsActive,
		&i.Meta,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.ModifiedBy,
		&i.ModifiedAt,
	)
	return i, err
}

const listVendors = `-- name: ListVendors :many
SELECT id, name, is_active, meta, created_by, created_at, modified_by, modified_at FROM "vendor"
ORDER BY name
`

func (q *Queries) ListVendors(ctx context.Context) ([]Vendor, error) {
	rows, err := q.db.QueryContext(ctx, listVendors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vendor
	for rows.Next() {
		var i Vendor
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IsActive,
			&i.Meta,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.ModifiedBy,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVendor = `-- name: UpdateVendor :exec
UPDATE "vendor"
SET
  name = $2,
  is_active = $3,
  meta = $4,
  created_by = $5,
  created_at = $6,
  modified_by = $7,
  modified_at= $8
WHERE id = $1
`

type UpdateVendorParams struct {
	ID         int32
	Name       sql.NullString
	IsActive   sql.NullBool
	Meta       sql.NullString
	CreatedBy  sql.NullInt32
	CreatedAt  sql.NullTime
	ModifiedBy sql.NullInt32
	ModifiedAt sql.NullTime
}

func (q *Queries) UpdateVendor(ctx context.Context, arg UpdateVendorParams) error {
	_, err := q.db.ExecContext(ctx, updateVendor,
		arg.ID,
		arg.Name,
		arg.IsActive,
		arg.Meta,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.ModifiedBy,
		arg.ModifiedAt,
	)
	return err
}
